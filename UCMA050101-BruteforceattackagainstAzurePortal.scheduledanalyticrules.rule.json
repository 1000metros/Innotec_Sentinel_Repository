{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "metadata": {
                "description": "Log Analytics Workspace Name"
            },
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers/', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c17b802d-4a63-4ccb-bbd1-e20c09a9014a')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c17b802d-4a63-4ccb-bbd1-e20c09a9014a')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "properties": {
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "P7D",
                        "matchingMethod": "Selected",
                        "groupByEntities": [
                            "Account",
                            "IP"
                        ],
                    "groupByAlertDetails": [],
                "groupByCustomDetails": []
            }
        },
        "entityMappings": [
            {
                "entityType": "Account",
                "fieldMappings": [
                    {
                        "identifier": "FullName",
                        "columnName": "AccountCustomEntity"
                    }
                ]
            },
            {
                "entityType": "IP",
                "fieldMappings": [
                    {
                        "identifier": "Address",
                        "columnName": "IPCustomEntity"
                    }
                ]
            }
        ],
        "queryFrequency": "PT1H",
        "queryPeriod": "P1D",
        "triggerOperator": "GreaterThan",
        "triggerThreshold": 0,
        "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
        },
        "severity": "Medium",
        "query": "let timeRange = 24h;\r\nlet failureCountThreshold = 30;\r\nlet authenticationWindow = 10m;\r\nlet aadFunc = (tableName:string){\r\n table(tableName)\r\n| where AppDisplayName has \"Azure Portal\"\r\n| extend\r\n     DeviceDetail = todynamic(DeviceDetail),\r\n     //Status = todynamic(Status),\r\n     LocationDetails = todynamic(LocationDetails)\r\n| extend\r\n     OS = tostring(DeviceDetail.operatingSystem),\r\n     Browser = tostring(DeviceDetail.browser),\r\n     //StatusCode = tostring(Status.errorCode),\r\n     //StatusDetails = tostring(Status.additionalDetails),\r\n     State = tostring(LocationDetails.state),\r\n     City = tostring(LocationDetails.city),\r\n     Region = tostring(LocationDetails.countryOrRegion)\r\n// Split out failure versus non-failure types\r\n| extend FailureOrSuccess = iff(ResultType in (\"0\", \"50125\", \"50140\", \"70043\", \"70044\"), \"Success\", \"Failure\")  \r\n// bin outcomes based on authenticationWindow\r\n| summarize take_anyif(UserPrincipalName, not(UserPrincipalName matches regex @\"[a-f\\d]+\\-[a-f\\d]+\\-[a-f\\d]+\\-[a-f\\d]+\\-[a-f\\d]+\")),\r\n     take_anyif(UserDisplayName, isnotempty(UserDisplayName)),  FailureOrSuccessCount = count() by  FailureOrSuccess, UserId, UserDisplayName, AppDisplayName, IPAddress, Browser, OS, State, City, Region, Type, CorrelationId, bin(TimeGenerated, authenticationWindow), ResultType\r\n// sort for sessionizing - by UserPrincipalName and time of the authentication outcome\r\n| sort by UserPrincipalName asc, TimeGenerated asc\r\n| serialize \r\n// sessionize into failure groupings until either the account changes or there is a success\r\n| extend SessionStartedUtc = row_window_session(TimeGenerated, timeRange, authenticationWindow, UserPrincipalName != prev(UserPrincipalName) or prev(FailureOrSuccess) == \"Success\")\r\n// count the failures in each session\r\n| summarize FailureCountBeforeSuccess=sumif(FailureOrSuccessCount, FailureOrSuccess == \"Failure\"), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), makelist(FailureOrSuccess), IPAddress = make_set(IPAddress), make_set(Browser), make_set(City), make_set(State), make_set(Region), make_set(ResultType) by SessionStartedUtc, UserPrincipalName, CorrelationId, AppDisplayName, UserId, Type\r\n// the session must not start with a success, and must end with one\r\n| where array_index_of(list_FailureOrSuccess, \"Success\") != 0\r\n| where array_index_of(list_FailureOrSuccess, \"Success\") == array_length(list_FailureOrSuccess) - 1\r\n| project-away SessionStartedUtc, list_FailureOrSuccess\r\n// where the number of failures before the success is above the threshold \r\n| where FailureCountBeforeSuccess >= failureCountThreshold \r\n// expand out ip for entity assignment\r\n| mv-expand IPAddress\r\n| extend IPAddress = tostring(IPAddress)\r\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress \r\n};\r\n let aadSignin = aadFunc(\"SigninLogs\");\r\n let aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\r\n union isfuzzy=true aadSignin, aadNonInt",
        "suppressionDuration": "PT5H",
        "suppressionEnabled": false,
    "tactics": [],
    "displayName": "UCMA050101 - Brute force attack against Azure Portal",
    "enabled": true,
    "description": "Identifica la evidencia de actividad de fuerza bruta contra Azure Portal al destacar mÃºltiples fallos de autenticaciÃ³n \ny por una autenticaciÃ³n exitosa dentro de una ventana de tiempo determinada. \nReferencias: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.",
    "alertRuleTemplateName": null
},
"apiVersion": "2021-09-01-preview"
}
]
}
