{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "metadata": {
                "description": "Log Analytics Workspace Name"
            },
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers/', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4fe7aa3c-b6b7-4a0c-9c20-29c10c00e58f')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4fe7aa3c-b6b7-4a0c-9c20-29c10c00e58f')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "properties": {
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "P1D",
                        "matchingMethod": "Selected",
                        "groupByEntities": [
                            "Account"
                        ],
                    "groupByAlertDetails": [],
                    "groupByCustomDetails": [
                        "Cliente"
                    ]
                }
            },
            "customDetails": {
                "Cliente": "TenantDetection"
            },
            "entityMappings": [
                {
                    "entityType": "Account",
                    "fieldMappings": [
                        {
                            "identifier": "Name",
                            "columnName": "samAccountName"
                        }
                    ]
                }
            ],
            "queryFrequency": "PT15M",
            "queryPeriod": "PT15M",
            "triggerOperator": "GreaterThan",
            "triggerThreshold": 0,
            "eventGroupingSettings": {
                "aggregationKind": "AlertPerResult"
            },
            "severity": "Low",
            "query": "let Mango = view () {\n    let VIPList = Mango_VIP_Users | project samAccountName;\n    let FailedEvents = workspace(\"4d082081-7c2a-4f57-b848-bd64e5c72859\").SecurityEvent\n    | where EventID == 4771 and Status !in (\"0x12\", \"0x13\", \"0x17\")\n    // Extract TargetUserName from RAW data because sometimes the field \"Account\" comes empty\n    | parse EventData with *'\"TargetUserName\">' TargetUserName '</Data>'*\n    // If TargetUserName contains the domain (like CLIENT\\user_name), we'll keep only the username to be able to check it against VIP lookup\n    | extend samAccountName = split(TargetUserName,'\\\\')\n    | extend samAccountName = iff(array_length(samAccountName) > 1, samAccountName[1], samAccountName[0])\n    // We do the same removing @CLIENT.DOMAIN\n    | extend samAccountName = split(samAccountName,'@')[0]\n    | where samAccountName in (VIPList) and isnotempty(samAccountName)\n    | summarize FailedOccurrences = count() by tostring(samAccountName);\n    let SuccessEvents = workspace(\"4d082081-7c2a-4f57-b848-bd64e5c72859\").SecurityEvent\n    | where EventID == 4624\n    // Extract TargetUserName from RAW data because sometimes the field \"Account\" comes empty\n    | parse EventData with *'\"TargetUserName\">' TargetUserName '</Data>'*\n    // If TargetUserName contains the domain (like CLIENT\\user_name), we'll keep only the username to be able to check it against VIP lookup\n    | extend samAccountName = split(TargetUserName,'\\\\')\n    | extend samAccountName = iff(array_length(samAccountName) > 1, samAccountName[1], samAccountName[0])\n    // We do the same removing @CLIENT.DOMAIN\n    | extend samAccountName = split(samAccountName,'@')[0]\n    | where samAccountName in (VIPList) and isnotempty(samAccountName)\n    | summarize SuccessOccurrences = count() by tostring(samAccountName);\n    SuccessEvents\n    | where samAccountName in ((FailedEvents | summarize make_list(samAccountName)))\n    | join FailedEvents on samAccountName\n    | project samAccountName, SuccessOccurrences, FailedOccurrences\n};\nunion withsource=\"TenantDetection\" Mango",
            "suppressionDuration": "PT5H",
            "suppressionEnabled": false,
        "tactics": [],
        "displayName": "UC051686 - User pre-authentication failed error increase VIP",
        "enabled": true,
        "description": "Detects kerberos pre-authentication failure (Event ID 4771) from users who does belong to the VIP list and the user account does not have revoked credentials, does not have any change to the account, the account is not locked out and has a correct login (Event ID 4624).",
        "alertRuleTemplateName": null
    },
    "apiVersion": "2021-09-01-preview"
}
]
}
